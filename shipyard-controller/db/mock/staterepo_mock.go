// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package db_mock

import (
	"github.com/keptn/keptn/shipyard-controller/models"
	"sync"
)

// StateRepoMock is a mock implementation of db.StateRepo.
//
// 	func TestSomethingThatUsesStateRepo(t *testing.T) {
//
// 		// make and configure a mocked db.StateRepo
// 		mockedStateRepo := &StateRepoMock{
// 			CreateStateFunc: func(state models.SequenceState) error {
// 				panic("mock out the CreateState method")
// 			},
// 			DeleteStatesFunc: func(filter models.StateFilter) error {
// 				panic("mock out the DeleteStates method")
// 			},
// 			FindStatesFunc: func(filter models.StateFilter) (*models.SequenceStates, error) {
// 				panic("mock out the FindStates method")
// 			},
// 			UpdateStateFunc: func(state models.SequenceState) error {
// 				panic("mock out the UpdateState method")
// 			},
// 		}
//
// 		// use mockedStateRepo in code that requires db.StateRepo
// 		// and then make assertions.
//
// 	}
type StateRepoMock struct {
	// CreateStateFunc mocks the CreateState method.
	CreateStateFunc func(state models.SequenceState) error

	// DeleteStatesFunc mocks the DeleteStates method.
	DeleteStatesFunc func(filter models.StateFilter) error

	// FindStatesFunc mocks the FindStates method.
	FindStatesFunc func(filter models.StateFilter) (*models.SequenceStates, error)

	// UpdateStateFunc mocks the UpdateState method.
	UpdateStateFunc func(state models.SequenceState) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateState holds details about calls to the CreateState method.
		CreateState []struct {
			// State is the state argument value.
			State models.SequenceState
		}
		// DeleteStates holds details about calls to the DeleteStates method.
		DeleteStates []struct {
			// Filter is the filter argument value.
			Filter models.StateFilter
		}
		// FindStates holds details about calls to the FindStates method.
		FindStates []struct {
			// Filter is the filter argument value.
			Filter models.StateFilter
		}
		// UpdateState holds details about calls to the UpdateState method.
		UpdateState []struct {
			// State is the state argument value.
			State models.SequenceState
		}
	}
	lockCreateState  sync.RWMutex
	lockDeleteStates sync.RWMutex
	lockFindStates   sync.RWMutex
	lockUpdateState  sync.RWMutex
}

// CreateState calls CreateStateFunc.
func (mock *StateRepoMock) CreateState(state models.SequenceState) error {
	if mock.CreateStateFunc == nil {
		panic("StateRepoMock.CreateStateFunc: method is nil but StateRepo.CreateState was just called")
	}
	callInfo := struct {
		State models.SequenceState
	}{
		State: state,
	}
	mock.lockCreateState.Lock()
	mock.calls.CreateState = append(mock.calls.CreateState, callInfo)
	mock.lockCreateState.Unlock()
	return mock.CreateStateFunc(state)
}

// CreateStateCalls gets all the calls that were made to CreateState.
// Check the length with:
//     len(mockedStateRepo.CreateStateCalls())
func (mock *StateRepoMock) CreateStateCalls() []struct {
	State models.SequenceState
} {
	var calls []struct {
		State models.SequenceState
	}
	mock.lockCreateState.RLock()
	calls = mock.calls.CreateState
	mock.lockCreateState.RUnlock()
	return calls
}

// DeleteStates calls DeleteStatesFunc.
func (mock *StateRepoMock) DeleteStates(filter models.StateFilter) error {
	if mock.DeleteStatesFunc == nil {
		panic("StateRepoMock.DeleteStatesFunc: method is nil but StateRepo.DeleteStates was just called")
	}
	callInfo := struct {
		Filter models.StateFilter
	}{
		Filter: filter,
	}
	mock.lockDeleteStates.Lock()
	mock.calls.DeleteStates = append(mock.calls.DeleteStates, callInfo)
	mock.lockDeleteStates.Unlock()
	return mock.DeleteStatesFunc(filter)
}

// DeleteStatesCalls gets all the calls that were made to DeleteStates.
// Check the length with:
//     len(mockedStateRepo.DeleteStatesCalls())
func (mock *StateRepoMock) DeleteStatesCalls() []struct {
	Filter models.StateFilter
} {
	var calls []struct {
		Filter models.StateFilter
	}
	mock.lockDeleteStates.RLock()
	calls = mock.calls.DeleteStates
	mock.lockDeleteStates.RUnlock()
	return calls
}

// FindStates calls FindStatesFunc.
func (mock *StateRepoMock) FindStates(filter models.StateFilter) (*models.SequenceStates, error) {
	if mock.FindStatesFunc == nil {
		panic("StateRepoMock.FindStatesFunc: method is nil but StateRepo.FindStates was just called")
	}
	callInfo := struct {
		Filter models.StateFilter
	}{
		Filter: filter,
	}
	mock.lockFindStates.Lock()
	mock.calls.FindStates = append(mock.calls.FindStates, callInfo)
	mock.lockFindStates.Unlock()
	return mock.FindStatesFunc(filter)
}

// FindStatesCalls gets all the calls that were made to FindStates.
// Check the length with:
//     len(mockedStateRepo.FindStatesCalls())
func (mock *StateRepoMock) FindStatesCalls() []struct {
	Filter models.StateFilter
} {
	var calls []struct {
		Filter models.StateFilter
	}
	mock.lockFindStates.RLock()
	calls = mock.calls.FindStates
	mock.lockFindStates.RUnlock()
	return calls
}

// UpdateState calls UpdateStateFunc.
func (mock *StateRepoMock) UpdateState(state models.SequenceState) error {
	if mock.UpdateStateFunc == nil {
		panic("StateRepoMock.UpdateStateFunc: method is nil but StateRepo.UpdateState was just called")
	}
	callInfo := struct {
		State models.SequenceState
	}{
		State: state,
	}
	mock.lockUpdateState.Lock()
	mock.calls.UpdateState = append(mock.calls.UpdateState, callInfo)
	mock.lockUpdateState.Unlock()
	return mock.UpdateStateFunc(state)
}

// UpdateStateCalls gets all the calls that were made to UpdateState.
// Check the length with:
//     len(mockedStateRepo.UpdateStateCalls())
func (mock *StateRepoMock) UpdateStateCalls() []struct {
	State models.SequenceState
} {
	var calls []struct {
		State models.SequenceState
	}
	mock.lockUpdateState.RLock()
	calls = mock.calls.UpdateState
	mock.lockUpdateState.RUnlock()
	return calls
}
